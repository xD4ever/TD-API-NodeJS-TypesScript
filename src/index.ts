// Importation des modules nÃ©cessaires
import express, { Request, Response } from 'express'; // Framework Express et types pour lesrequÃªtes/rÃ©ponses
import * as dotenv from 'dotenv'; // Permet de charger les variables dâ€™environnement
import userRoutes from './routes/user.route'; // Importe les routes utilisateurs
import { connectDB } from './db';

// Charge les variables d'environnement depuis le fichier .env
dotenv.config();

// CrÃ©ation de l'application Express
const app = express();

// DÃ©finition du port du serveur (utilise celui de l'environnement ou 3000 par dÃ©faut)
const PORT = process.env.PORT || 3000;

// Middleware pour parser le JSON dans les requÃªtes entrantes
app.use(express.json());

// Route de test pour vÃ©rifier si le serveur fonctionne
app.get('/', (req: Request, res: Response) => {
 res.send('ðŸš€ API Node.js avec TypeScript fonctionne !'); // RÃ©ponse envoyÃ©e au client
});

// Utilisation des routes utilisateurs dÃ©finies dans "user.routes.ts"
app.use('/users', userRoutes);

// Connect to MongoDB first, then start the server
connectDB()
	.then(() => {
		app.listen(PORT, () => {
			console.log(`âœ… Serveur dÃ©marrÃ© sur http://localhost:${PORT}`);
		});
	})
	.catch((err) => {
		console.error('Failed to start server due to DB connection error:', err);
		process.exit(1);
	});